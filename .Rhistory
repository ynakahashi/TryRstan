}
W  <- tf$Variable(tf$zeros(shape(4L, 3L)))
x  <- tf$placeholder(tf$float32, shape(NULL, 4L))
b  <- tf$Variable(tf$zeros(3L))
y  <- tf$nn$softmax(tf$matmul(x, W)+b)
y_ <- tf$placeholder(tf$float32, shape(NULL, 3L))
loss  <- tf$reduce_mean(-tf$reduce_sum(y_*y, reduction_indices = 1L))
opt   <- tf$train$GradientDescentOptimizer(0.9)
train <- opt$minimize(loss)
trn_x <- iris %>%
select(-Species) %>%
as.matrix()
trn_y <- iris %>%
dummyVars(formula = ~ Species, sep = NULL) %>%
predict(object = ., newdata = iris) %>%
as.matrix()
sess <- tf$Session()
sess$run(tf$initialize_all_variables())
for (step in 1:5000){
sess$run(train, dict(x=trn_x, y_=trn_y))
if (step %% 500 == 0) {
cat(step, "-", sess$run(W), sess$run(b), "\n")
print(table(
predict = sess$run(fetches = y, feed_dict = dict(x = trn_x, y_ = trn_y)) %>%
apply(MARGIN = 1, FUN = which.max),
true = trn_y %>%
apply(MARGIN = 1, FUN = which.max)))
}
}
sess$run(train, dict(x=trn_x, y_=trn_y))
sess$run(W)
sess$run(b)
c(sess$run(W), sess$run(b))
resAll <- matrix(NULL, times, 15)
resAll <- matrix(NA, times, 15)
times <- 5000
each <- 500
resAll <- matrix(NA, times, 15)
head(resAll)
times <- 5000
each <- 500
resAll <- matrix(NA, times, 15)
for (step in 1:5000){
sess$run(train, dict(x=trn_x, y_=trn_y))
resAll[i, ] <- c(sess$run(W), sess$run(b))
if (step %% 500 == 0) {
cat(step, "-", sess$run(W), sess$run(b), "\n")
print(table(
predict = sess$run(fetches = y, feed_dict = dict(x = trn_x, y_ = trn_y)) %>%
apply(MARGIN = 1, FUN = which.max),
true = trn_y %>%
apply(MARGIN = 1, FUN = which.max)))
}
}
N    <- 5000
each <- 500
resAll <- matrix(NA, N, 15)
for (i in 1:5000){
sess$run(train, dict(x=trn_x, y_=trn_y))
resAll[i, ] <- c(sess$run(W), sess$run(b))
if (i %% 500 == 0) {
cat(i, "-", sess$run(W), sess$run(b), "\n")
print(table(
predict = sess$run(fetches = y, feed_dict = dict(x = trn_x, y_ = trn_y)) %>%
apply(MARGIN = 1, FUN = which.max),
true = trn_y %>%
apply(MARGIN = 1, FUN = which.max)))
}
}
dim(resAll)
head(resAll)
tail(resAll)
plot(resAll[, 1], type="l")
plot(resAll[, 2], type="l")
plot(resAll[, 3], type="l")
plot(resAll[, 4], type="l")
plot(resAll[, 5], type="l")
plot(resAll[, 6], type="l")
plot(resAll[, 7], type="l")
plot(resAll[, 8], type="l")
plot(resAll[, 9], type="l")
plot(resAll[, 10], type="l")
plot(resAll[, 11], type="l")
plot(resAll[, 12], type="l")
plot(resAll[, 13], type="l")
plot(resAll[, 14], type="l")
plot(resAll[, 15], type="l")
N    <- 20000
each <- 1000
resAll <- matrix(NA, N, 15)
for (i in 1:N){
sess$run(train, dict(x=trn_x, y_=trn_y))
resAll[i, ] <- c(sess$run(W), sess$run(b))
if (i %% each == 0) {
cat(i, "-", sess$run(W), sess$run(b), "\n")
print(table(
predict = sess$run(fetches = y, feed_dict = dict(x = trn_x, y_ = trn_y)) %>%
apply(MARGIN = 1, FUN = which.max),
true = trn_y %>%
apply(MARGIN = 1, FUN = which.max)))
}
}
plot(resAll[, 1], type="l")
sess <- tf$Session()
sess$run(tf$initialize_all_variables())
N    <- 20000
each <- 1000
resAll <- matrix(NA, N, 15)
for (i in 1:N){
sess$run(train, dict(x=trn_x, y_=trn_y))
resAll[i, ] <- c(sess$run(W), sess$run(b))
if (i %% each == 0) {
cat(i, "-", sess$run(W), sess$run(b), "\n")
print(table(
predict = sess$run(fetches = y, feed_dict = dict(x = trn_x, y_ = trn_y)) %>%
apply(MARGIN = 1, FUN = which.max),
true = trn_y %>%
apply(MARGIN = 1, FUN = which.max)))
}
}
glmnet(trn_x, trn_y, "multinomial")
resglm <- glmnet(trn_x, trn_y, "multinomial")
predict(resglm)
predict(resglm, trn_x)
apply(predict(resglm, trn_x), 1, which.max)
apply(predict(resglm, trn_x), 2, which.max)
apply(predict(resglm, trn_x), 1, which.max)
predict(resglm, trn_x)
resglm <- glmnet(trn_x, iris$Species, "multinomial")
resglm
table(
predict = predict(resglm, newx = tst_x, type = "class", s = 0.01)[, 1],
true = iris$Species
)
table(
predict = predict(resglm, newx = trn_x, type = "class", s = 0.01)[, 1],
true = iris$Species
)
library(tensorflow)
library(dplyr)
library(caret)
library(glmnet)
tf$VERSION
sess  <- tf$Session()
hello <- tf$constant("Hello, TensorFlow!")
sess$run(hello)
set.seed(123)
x_data <- runif(100, min=0, max=1)
y_data <- x_data * 1.5 - 12
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
b <- tf$Variable(tf$zeros(shape(1L)))
y <- W * x_data + b
loss  <- tf$reduce_mean((y-y_data)^2)
opt   <- tf$train$GradientDescentOptimizer(0.2)
train <- opt$minimize(loss)
sess <- tf$Session()
sess$run(tf$initialize_all_variables())
for (step in 1:1001){
sess$run(train)
if (step %% 20 == 0) {
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
}
W  <- tf$Variable(tf$zeros(shape(4L, 3L)))
x  <- tf$placeholder(tf$float32, shape(NULL, 4L))
b  <- tf$Variable(tf$zeros(3L))
y  <- tf$nn$softmax(tf$matmul(x, W)+b)
y_ <- tf$placeholder(tf$float32, shape(NULL, 3L))
loss  <- tf$reduce_mean(-tf$reduce_sum(y_*y, reduction_indices = 1L))
opt   <- tf$train$GradientDescentOptimizer(0.9)
train <- opt$minimize(loss)
trn_x <- iris %>%
select(-Species) %>%
as.matrix()
trn_y <- iris %>%
dummyVars(formula = ~ Species, sep = NULL) %>%
predict(object = ., newdata = iris) %>%
as.matrix()
sess <- tf$Session()
sess$run(tf$initialize_all_variables())
N    <- 20000
each <- 1000
resAll <- matrix(NA, N, 15)
for (i in 1:N){
sess$run(train, dict(x=trn_x, y_=trn_y))
resAll[i, ] <- c(sess$run(W), sess$run(b))
if (i %% each == 0) {
cat(i, "-", sess$run(W), sess$run(b), "\n")
print(table(
predict = sess$run(fetches = y, feed_dict = dict(x = trn_x, y_ = trn_y)) %>%
apply(MARGIN = 1, FUN = which.max),
true = trn_y %>%
apply(MARGIN = 1, FUN = which.max)))
}
}
library(ranger)
install.packages("ranger")
library(ranger)
ranger(Species ~., data=iris, mtry=2, num.trees = 500, write.forest=TRUE)
resGLM <- glmnet(trn_x, iris$Species, "multinomial")
glmnet_confusion_mat <- table(
predict = predict(resglm, newx = trn_x, type = "class", s = 0.01)[, 1],
true = iris$Species
)
glmnet_confusion_mat
resRF <- ranger(Species ~., data=iris, mtry=2, num.trees = 500, write.forest=TRUE)
table(iris$Species, predict(rf1, data=iris)$predictions)
table(iris$Species, predict(resRF, data=iris)$predictions)
set.seed(123)
x_data <- runif(100, min=0, max=1)
y_data <- x_data * 1.5 - 12
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
# W <- tf$Variable(tf$zeros(shape(1L)))
b <- tf$Variable(tf$zeros(shape(1L)))
y <- W * x_data + b
loss  <- tf$reduce_mean((y-y_data)^2)
opt   <- tf$train$GradientDescentOptimizer(0.2)
train <- opt$minimize(loss)
sess <- tf$Session()
# sess$run(tf$global_variables_initializer())
sess$run(tf$initialize_all_variables())
for (step in 1:1001){
sess$run(train)
if (step %% 20 == 0) {
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
}
install.packages("sparklyr")
library(sparklyr)
spark_install(version = "1.6.2")
sc <- spark_connect(master = "local")
sc
install.packages(c("nycflights13", "Lahman"))
iris_tbl    <- copy_to(sc, iris)
flights_tbl <- copy_to(sc, nycflights13::flights, "flights")
batting_tbl <- copy_to(sc, Lahman::Batting, "batting")
src_tbls(sc)
library(dplyr)
src_tbls(sc)
dim(batting_tbl)
dim(flights_tbl)
dim(iris_tbl)
head(flights_tbl)
flights_tbl %>%
filter(dep_delay == 2)
flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect
?collect
flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
as.data.frame()
library(ggplot2)
delay <- flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
# collect
as.data.frame()
dim(delay)
head(delay)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
dim(flights_tbl)
work_dir <- "/Uses/nakahashi/Desktop/GitTest/TryRstan"
setwd(work_dir)
work_dir <- "/Users/nakahashi/Desktop/GitTest/TryRstan"
setwd(work_dir)
ls()
dir
dir()
work_dir <- "/Users/nakahashi/Desktop/GitTest/TryRstan"
setwd(work_dir)
dir
dir()
rstan:::rstudio_stanc("model_8_1.stan")
library(rstan)
stan_data <- read.csv("data-sarary-2.csv", stringsAsFactors = F)
stan_data <- read.csv("data-sarary-2.txt", stringsAsFactors = F)
head(stan_data)
dat <- read.csv("data-sarary-2.txt", stringsAsFactors = F)
as.matrix(dat)
class(dat)
dat <- as.matrix(read.csv("data-sarary-2.txt", stringsAsFactors = F))
dat
dat <- read.csv("data-sarary-2.txt", stringsAsFactors = F)
gp <- ggplot(dat, aes=(X=dat$X, Y=dat$Y, colour=KID)
gp <- ggplot(dat, aes=(X=dat$X, Y=dat$Y, colour=KID))
gp <- ggplot(dat, aes(X=dat$X,
Y=dat$Y,
colour=KID))
plot(gp)
gp <- gp + geom_point()
plot(gp)
gp <- ggplot(dat, aes(X=dat$X,
Y=dat$Y)
gp <- gp + geom_point()
dat
dat$Y
gp <- ggplot(dat, aes(x=dat$X,
y=dat$Y)
)
gp <- ggplot(dat, aes(x=dat$X,
y=dat$Y))
gp <- gp + geom_point()
plot(gp)
gp <- ggplot(dat, aes(x=dat$X,
y=dat$Y,
colour=dat$KID))
gp <- gp + geom_point()
plot(gp)
gp <- ggplot(dat, aes(x=dat$X,
y=dat$Y,
colour=KID))
gp <- gp + geom_point()
plot(gp)
gp <- ggplot(dat, aes(x=dat$X,
y=dat$Y,
colour=as.character(dat$KID)))
gp <- gp + geom_point()
plot(gp)
dat_sar <- list(N = nrow(dat),
X = dat$X,
Y = dat$Y,
KID = dat$KID)
fit <- stan(file = 'model_8_1.stan', data=dat_sar, seed=1234)
fit_01 <- stan(file = 'model_8_1.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
traceplot(fit_01)
print(fit_01)
fit_11 <- lm(Y~X, data=dat)
summary(fit_11)
print(fit_11)
print(fit_01)
print(fit_11)
print(summary(fit_11))
print(fit_01)
print(summary(fit_11))
fit_11$var
str(fit_11)
str(summary(fit_11))
summary(fit_11)$sigma
print(fit_01)
print(summary(fit_11))
print(summary(fit_11)$sigma)
stan_trace(fit_01)
stan_hist(fit_01)
stan_dens(fit_01, separate_chains = T)
stan_ac(fit_01, separate_chains = T)
rstan::extract(fit_01)
print(fit_01)
gp <- ggplot(dat, aes(X, Y, shape=as.character(dat$KID)))
gp
gp <- gp + theme_bw(base_size=18)
gp <- ggplot(dat, aes(X, Y, shape=as.character(dat$KID)))
gp <- gp + theme_bw(base_size = 18)
gp <- gp + geom_point(size = 2)
plot(gp)
gp <- ggplot(dat, aes(X, Y, shape=KID)
gp <- gp + theme_bw(base_size = 18)
gp <- gp + geom_point(size = 2)
plot(gp)
## prepare data
dat_sar <- list(N = nrow(dat),
X = dat$X,
Y = dat$Y,
KID = dat$KID)
## fitting
fit_01 <- stan(file = 'model_8_1.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
res_01 <- rstan::extract(fit_01)
## fit lm for camparison
fit_11 <- lm(Y~X, data=dat)
## plot result
print(fit_01)
print(summary(fit_11))
print(summary(fit_11)$sigma)
stan_trace(fit_01)
stan_hist(fit_01)
stan_dens(fit_01, separate_chains = T)
stan_ac(fit_01, separate_chains = T)
gp <- ggplot(dat, aes(X, Y, shape=KID)
gp <- gp + theme_bw(base_size = 18)
gp <- gp + geom_point(size = 2)
plot(gp)
## prepare data
dat_sar <- list(N = nrow(dat),
X = dat$X,
Y = dat$Y,
KID = dat$KID)
## fitting
fit_01 <- stan(file = 'model_8_1.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
res_01 <- rstan::extract(fit_01)
## fit lm for camparison
fit_11 <- lm(Y~X, data=dat)
## plot result
print(fit_01)
print(summary(fit_11))
print(summary(fit_11)$sigma)
stan_trace(fit_01)
stan_hist(fit_01)
stan_dens(fit_01, separate_chains = T)
stan_ac(fit_01, separate_chains = T)
gp <- ggplot(dat, aes(X, Y, shape=KID))
gp <- gp + theme_bw(base_size = 18)
gp <- gp + geom_point(size = 2)
plot(gp)
dat$KID <- as.factor(dat$KID)
gp <- ggplot(dat, aes(X, Y, shape=KID))
gp <- gp + theme_bw(base_size = 18)
gp <- gp + geom_point(size = 2)
plot(gp)
fit_01 <- stan(file = 'model_8_1.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
res_01 <- rstan::extract(fit_01)
fit_11 <- lm(Y~X, data=dat)
print(fit_01)
print(summary(fit_11))
print(summary(fit_11)$sigma)
stan_trace(fit_01)
rstan:::rstudio_stanc("model_8_2.stan")
fit_02 <- stan(file = 'model_8_2.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
level(dat$KID)
levels(dat$KID)
dat_sar <- list(N = nrow(dat),
X = dat$X,
Y = dat$Y,
K = length(levels(dat$KID)),
KID = dat$KID)
fit_02 <- stan(file = 'model_8_2.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
dat <- read.csv("data-sarary-2.txt", stringsAsFactors = F)
dat <- read.csv("data-sarary-2.txt", stringsAsFactors = F)
gp <- ggplot(dat, aes(X, Y, shape=as.factor(KID)))
gp <- gp + theme_bw(base_size = 18)
gp <- gp + geom_point(size = 2)
plot(gp)
levels(dat$KID)
dat$KID
unique(dat$KID)
dat_sar <- list(N = nrow(dat),
X = dat$X,
Y = dat$Y,
K = length(unique(dat$KID)),
KID = dat$KID)
length(unique(dat$KID))
fit_02 <- stan(file = 'model_8_2.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
res_01 <- rstan::extract(fit_01)
res_02 <- rstan::extract(fit_02)
print(fit_02)
print(summary(fit_11))
stan_trace(fit_02)
stan_hist(fit_02)
stan_dens(fit_02, separate_chains = T)
stan_ac(fit_02, separate_chains = T)
print(fit_02)
fit_03 <- stan(file = 'model_8_3.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
rstan:::rstudio_stanc("model_8_3.stan")
rstan:::rstudio_stanc("model_8_3.stan")
fit_03 <- stan(file = 'model_8_3.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
fit_03
fit_03 <- stan(file = 'model_8_3.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
fit_03 <- stan(file = 'model_8_3.stan',
data = dat_sar,
iter = 10000,
chains = 4,
seed = 1234)
print(fit_03)
stan_trace(fit_03)
stan_trace(fit_03)
