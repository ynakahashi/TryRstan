ls()
install.packages("mlbench")
install.packages("mxnet")
install.packages("jsonlite")
library(jsonlite)
fromJSON
require(mlbench)
require(mxnet)
data(Sonar, package="mlbench")
Sonar[,61] = as.numeric(Sonar[,61])-1
train.ind = c(1:50, 100:150)
train.x = data.matrix(Sonar[train.ind, 1:60])
train.y = Sonar[train.ind, 61]
test.x = data.matrix(Sonar[-train.ind, 1:60])
test.y = Sonar[-train.ind, 61]
mx.set.seed(0)
model <- mx.mlp(train.x, train.y, hidden_node=10, out_node=2, out_activation="softmax",
num.round=20, array.batch.size=15, learning.rate=0.07, momentum=0.9,
eval.metric=mx.metric.accuracy)
graph.viz(model$symbol$as.json())
model$symbol
model$symbol$as.json()
model$symbol$as.json
model$symbol$as.json(model$symbol)
model$symbol$as.json(model$symbol$as.json())
model$symbol$as.json()
graph.viz()
graph.viz(model$symbol)
graph.viz(model$symbol)
model$symbol
preds = predict(model, test.x)
pred.label = max.col(t(preds))-1
table(pred.label, test.y)
data(BostonHousing, package="mlbench")
train.ind = seq(1, 506, 3)
train.x = data.matrix(BostonHousing[train.ind, -14])
train.y = BostonHousing[train.ind, 14]
test.x = data.matrix(BostonHousing[-train.ind, -14])
test.y = BostonHousing[-train.ind, 14]
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, num_hidden=1)
lro <- mx.symbol.LinearRegressionOutput(fc1)
mx.set.seed(0)
model <- mx.model.FeedForward.create(lro, X=train.x, y=train.y,
ctx=mx.cpu(),     num.round=50, array.batch.size=20,
learning.rate=2e-6, momentum=0.9,  eval.metric=mx.metric.rmse)
graph.viz(model$symbol)
preds = predict(model, test.x)
preds
sqrt(mean((preds-test.y)^2))
demo.metric.mae <- mx.metric.custom("mae", function(label, pred) {
res <- mean(abs(label-pred))
return(res)
})
mx.set.seed(0)
model <- mx.model.FeedForward.create(lro, X=train.x, y=train.y,
ctx=mx.cpu(),    num.round=50, array.batch.size=20,
learning.rate=2e-6, momentum=0.9, eval.metric=demo.metric.mae)
head(BostonHousing)
dim(BostonHousing)
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, num_hidden=1)
lro <- mx.symbol.LinearRegressionOutput(fc1)
work_dir <- "/Users/ynakahashi/Desktop/ynakahashi_git/TryRstan"
setwd(work_dir)
## load rstan
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
################################################################################
## Set parameters for simulation data
################################################################################
## seed
set.seed(123)
## number of data
num_week     <- 52
num_year     <- 4
year_name    <- c(1:num_year) + 2000
num_region   <- 10
region_name  <- 1:num_region
## seasonal effects
p <- 0.7 # just a threshold value for seasonal effect
season_eff <- sin(1:num_week) * 1 *  ifelse(runif(num_week) > p, 1, 0)
plot(season_eff, type="l")
## intercept
int_region <- runif(num_region) * rep(1:5, 2)
plot(int_region, type="l")
## regression coefficients
beta_TV_AS_0   <- c(0.006, 0.002) # hyper-parameter for TV ad-stock
beta_Digi_AS_0 <- c(0.010, 0.003) # hyper-parameter for Digital ad-stock
beta_TV_AS     <- rnorm(num_region, beta_TV_AS_0[1], beta_TV_AS_0[2])
beta_Digi_AS   <- rnorm(num_region, beta_Digi_AS_0[1], beta_Digi_AS_0[2])
## tactics
TV_para      <- c(20, 50, 0.7) # mean, sd, decay
Digi_para    <- c(5, 20, 0.5) # mean, sd, decay
lower_bond   <- 0
## residuals
var_error <- c(0, 0.2)
################################################################################
## Create simulation data
################################################################################
## create X
data_length  <- num_week * num_year * num_region
TV_Spend     <- ceiling(truncnorm::rtruncnorm(data_length,
a = lower_bond,
mean = TV_para[1],
sd = TV_para[2]))
TV_Matrix    <- data.frame(matrix(TV_Spend, nrow = num_week * num_year))
TV_AdStock   <- do.call("cbind", lapply(TV_Matrix,
function(x) {filter(x, TV_para[3], "recursive")}))
TV_ADS       <- tidyr::gather(data.frame(TV_AdStock))
Digi_Spend   <- ceiling(truncnorm::rtruncnorm(data_length,
a = lower_bond,
mean = Digi_para[1],
sd = Digi_para[2]))
Digi_Matrix  <- data.frame(matrix(Digi_Spend, nrow = num_week * num_year))
Digi_AdStock <- do.call("cbind", lapply(Digi_Matrix,
function(x) {filter(x, Digi_para[3], "recursive")}))
Digi_ADS     <- tidyr::gather(data.frame(Digi_AdStock))
X_Mat <- data.frame("TV_ADS" = TV_ADS$value, "Digi_ADS" = Digi_ADS$value)
## create Y
Intercept <- rep(int_region, each = num_week * num_year)
Seasonal  <- rep(season_eff, num_year * num_region)
TV_Eff    <- rep(beta_TV_AS, each = num_week * num_year) * X_Mat$TV_ADS
Digi_Eff  <- rep(beta_Digi_AS, each = num_week * num_year) * X_Mat$Digi_ADS
Error     <- rnorm(data_length, mean = var_error[1], sd = var_error[2])
log_Y     <- Intercept + Seasonal + TV_Eff + Digi_Eff + Error
plot(log_Y[1:208], type="l")
## create data
dat_Ana <- data.frame(
"NUM_ORDERS"       = ceiling(exp(log_Y)),
"Year"             = rep(rep(year_name, each = num_week), num_region),
# "Week_Num"         = stringr::str_pad(rep(1:num_week, num_year * num_region),
#                                       2, side = "left", "0"),
"Region"           = rep(region_name, each = num_week * num_year),
"TV_Spending"      = TV_Spend,
"Digital_Spending" = Digi_Spend
)
################################################################################
## Run stan
################################################################################
## load sample data
dat <- dat_Ana
dat_Ord <- list(N    = nrow(dat),
Y    = log(dat$NUM_ORDERS),
TV   = dat$TV_Spending,
Digi = dat$Digital_Spending,
K    = length(unique(dat$Region)),
Reg  = dat$Region)
fit_01 <- stan(file = './StanModel/model_Simulation.stan',
data = dat,
iter = 1000,
chains = 4,
seed = 1234)
head(dat)
nrow(dat)
dat$NUM_ORDERS
dat$TV_Spending
dat$Digital_Spending
K
dat_Ord
dat_Ana <- data.frame(
"NUM_ORDERS"       = ceiling(exp(log_Y)),
"Year"             = rep(rep(year_name, each = num_week), num_region),
"Week_Num"         = stringr::str_pad(rep(1:num_week, num_year * num_region),
2, side = "left", "0"),
"Region"           = rep(region_name, each = num_week * num_year),
"TV_Spending"      = TV_Spend,
"Digital_Spending" = Digi_Spend
)
dat <- dat_Ana
fit_01 <- stan(file = './StanModel/model_Simulation.stan',
data = dat_Ord,
iter = 1000,
chains = 4,
seed = 1234)
fit_01
print(fit_01)
stan_trace(fit_01)
stan_trace(fit_01, pars = 30)
args(stan_trace)
?stan_trace
int_region
print(fit_01)
str(fit_01)
beta_TV_AS
print(fit_01)
